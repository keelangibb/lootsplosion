// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Weapon {
    id             String          @id @default(cuid())
    name           String
    rarityId       String
    rarity         Rarity          @relation(fields: [rarityId], references: [id])
    flavorText     String
    typeId         String
    type           WeaponType      @relation(fields: [typeId], references: [id])
    manufacturerId String
    manufacturer   Manufacturer    @relation(fields: [manufacturerId], references: [id])
    details        String
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    element        Element[]
    WeaponElement  WeaponElement[]

    @@index([rarityId])
    @@index([manufacturerId])
    @@index([typeId])
}

model Rarity {
    id      String   @id @default(cuid())
    name    String
    weapons Weapon[]
}

model WeaponType {
    id      String   @id @default(cuid())
    name    String
    weapons Weapon[]
}

model Manufacturer {
    id      String   @id @default(cuid())
    name    String
    weapons Weapon[]
}

model Content {
    id   String @id @default(cuid())
    name String
}

model Element {
    id            String          @id @default(cuid())
    name          String
    picture       String
    weapons       Weapon[]
    WeaponElement WeaponElement[]
}

model WeaponElement {
    weaponId  String
    weapon    Weapon  @relation(fields: [weaponId], references: [id], onDelete: Cascade)
    elementId String
    element   Element @relation(fields: [elementId], references: [id], onDelete: Cascade)

    @@id([weaponId, elementId])
    @@index([weaponId])
    @@index([elementId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
